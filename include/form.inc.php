<?php
#**********************************************************************************#


				#**********************************#
				#********** CLEAN STRING **********#
				#**********************************#
				
				
				/**
				*
				*	Ersetzt potentiell gef√§hrliche Zeichen (< > " ' &) eines √ºbergebenen Werts
				*	durch HTML-Entities und entfernt alle Whitespaces vor und nach dem Wert.
				*
				*	@param	String|Int|Float		$value		Der zu √ºbergebene Wert
				*
				*	@return	String|NULL							Der entsch√§rfte und bereinigte String
				*															NULL bei √ºbergebenem NULL
				*
				*/
				function cleanString($value) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debugCleanString'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					/*
						Da die √úbergabe von NULL an PHP-Funktionen deprecated (k√ºnftig
						nicht mehr erlaubt) ist, muss gff. vor Funktionsaufrufen auf
						NULL-Werte gepr√ºft werden.
					*/
					if( $value !== NULL ) {
						/*
							SCHUTZ GEGEN EINSCHLEUSUNG UNERW√úNSCHTEN CODES:
							Damit so etwas nicht passiert: <script>alert("HACK!")</script>
							muss der empfangene String ZWINGEND entsch√§rft werden!
							htmlspecialchars() wandelt potentiell gef√§hrliche Steuerzeichen wie
							< > " & in HTML-Code um (&lt; &gt; &quot; &amp;).
							
							Der Parameter ENT_QUOTES wandelt zus√§tzlich einfache ' in &apos; um.
							Der Parameter ENT_HTML5 sorgt daf√ºr, dass der generierte HTML-Code HTML5-konform ist.
							
							Der 1. optionale Parameter regelt die zugrundeliegende Zeichencodierung 
							(NULL=Zeichencodierung wird vom Webserver √ºbernommen)
							
							Der 2. optionale Parameter bestimmt die Zeichenkodierung
							
							Der 3. optionale Parameter regelt, ob bereits vorhandene HTML-Entities erneut entsch√§rft werden
							(false=keine doppelte Entsch√§rfung)
						*/
						$value = htmlspecialchars($value, ENT_QUOTES | ENT_HTML5, double_encode:false);
						
						/*
							trim() entfernt VOR und NACH einem String (aber nicht mitten drin) 
							s√§mtliche sog. Whitespaces (Leerzeichen, Tabs, Zeilenumbr√ºche)
						*/
						$value = trim($value);
					}
					
					return $value;
					#********** LOCAL SCOPE END **********#
				}


#**********************************************************************************#

				
				#****************************************#
				#********** CHECK INPUT STRING **********#
				#****************************************#
				
				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf Mindestl√§nge und Maximall√§nge sowie optional 
				* 	zus√§tzlich auf Leerstring.
				*	Generiert Fehlermeldung bei Leerstring oder ung√ºltiger L√§nge
				*
				*	@param	NULL|String		$value							Der zu √ºbergebende String
				*	@param	Integer			$minLength=INPUT_MIN_LENGTH		Die zu pr√ºfende Mindestl√§nge															
				*	@param	Integer			$maxLength=INPUT_MAX_LENGTH		Die zu pr√ºfende Maximall√§nge					
				*	@param	Bool			$mandatory=true					Angabe zu Pflichteingabe
				*
				*	@return	String|NULL										Fehlermeldung | ansonsten NULL
				*
				*/
				function checkInputString($value, $mandatory=true, $minLength=INPUT_MIN_LENGTH, $maxLength=INPUT_MAX_LENGTH ) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debugCheckInputString'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value | [$minLength|$maxLength] | mandatory:$mandatory') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					
					#********** MANDATORY CHECK **********#
					// OPTIONAL: Wenn $mandatory === true: Pr√ºfen auf Leerstring oder NULL
					if( $mandatory === true AND ($value === '' OR $value === NULL) ) {						
						// Fehlerfall
						return 'Dies ist ein Pflichtfeld!';
					
					
					#********** MAXIMUM LENGTH CHECK **********#
					/*
						Da die Felder in der Datenbank oftmals eine L√§ngenbegrenzung besitzen,
						die Datenbank aber bei √úberschreiten dieser Grenze keine Fehlermeldung
						ausgibt, sondern alles, das √ºber diese Grenze hinausgeht, stillschweigend 
						abschneidet, muss vorher eine Pr√ºfung auf diese Maximall√§nge durchgef√ºhrt 
						werden. Nur so kann dem User auch eine entsprechende Fehlermeldung ausgegeben
						werden.
					*/
					/*
						Seit PHP 8.1... d√ºrfen keine NULL-Werte mehr an PHP-Funktionen √ºbergeben werden.
					*/
					} elseif( $value !== NULL AND mb_strlen($value) > $maxLength ) {
						// Fehlerfall
						return "Darf maximal $maxLength Zeichen lang sein!";
					
					
					#********** MINIMUM LENGTH CHECK **********#
					/*
						Es gibt Sonderf√§lle, bei denen eine Mindestl√§nge f√ºr einen Userinput
						vorgegeben ist, beispielsweise bei der Erstellung von Passw√∂rtern.
						Damit nicht-Pflichtfelder aber auch weiterhin leer sein d√ºrfen, muss
						die Mindestl√§nge als Standardwert mit 0 vorbelegt sein.
					*/
					/*
						Seit PHP 8.1... d√ºrfen keine NULL-Werte mehr an PHP-Funktionen √ºbergeben werden.
					*/
					} elseif( $value !== NULL AND mb_strlen($value) < $minLength ) {
						// Fehlerfall
						return "Muss mindestens $minLength Zeichen lang sein!";
					
					
					#********** INPUT STRING IS VALID **********#
					} else {
						// Erfolgsfall
						return NULL;
						
					}
					#********** LOCAL SCOPE END **********#
				}
				

#**********************************************************************************#


				#************************************#
				#********** VALIDATE EMAIL **********#
				#************************************#
				
				
				/**
				*
				*	Pr√ºft einen √ºbergebenen String auf Leerstring und L√§nge
				*	via checkInputString().
				*	Pr√ºft den √ºbergebenen String zus√§tzlich auf eine valide Email-Adresse.
				*	Generiert Fehlermeldung bei Leerstring oder ung√ºltiger L√§nge 
				*	oder ung√ºltiger Email-Adresse.
				*
				*	@param	String	$value							Der zu √ºbergebende String
				*
				*	@return	String|NULL									Fehlermeldung | ansonsten NULL
				*
				*/
				function validateEmail($value) {
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debugValidateEmail'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$value') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					
					#********** MANDATORY CHECK **********#
					$error = checkInputString($value);
					if( $error !== NULL ) {
						// Fehlerfall
						return $error;
						
					
					#********** VALIDATE EMAIL ADDRESS FORMAT **********#
					} elseif( filter_var($value, FILTER_VALIDATE_EMAIL) === false ) {
						// Fehlerfall
						return 'Dies ist keine g√ºltige Email-Adresse!';
					

					#********** EMAIL ADDRESS IS VALID **********#					
					} else {
						// Erfolgsfall
						return NULL;
					}
					#********** LOCAL SCOPE END **********#
				}


#**********************************************************************************#


				/**
				*
				*	Validiert ein auf den Server geladenes Bild, generiert einen unique Dateinamen
				*	sowie eine sichere Dateiendung und verschiebt das Bild in ein anzugebendes Zielverzeichnis.
				*	Validiert werden der aus dem Dateiheader ausgelesene MIME-Type, die aus dem Dateiheader
				*	ausgelesene Bildgr√∂√üe in Pixeln sowie die auf Dateiebene ermittelte Dateigr√∂√üe. 
				*	Der Dateiheader wird au√üerdem auf Plausibilit√§t gepr√ºft.
				*
				*	@param	String	$fileTemp													Der tempor√§re Pfad zum hochgeladenen Bild im Quarant√§neverzeichnis
				*	@param	Integer	$imageMaxHeight				=IMAGE_MAX_HEIGHT				Die maximal erlaubte Bildh√∂he in Pixeln
				*	@param	Integer	$imageMaxWidth				=IMAGE_MAX_WIDTH				Die maximal erlaubte Bildbreite in Pixeln				
				*	@param	Integer	$imageMinSize				=IMAGE_MIN_SIZE					Die minimal erlaubte Dateigr√∂√üe in Bytes
				*	@param	Integer	$imageMaxSize				=IMAGE_MAX_SIZE					Die maximal erlaubte Dateigr√∂√üe in Bytes
				*	@param	Array	$imageAllowedMimeTypes		=IMAGE_ALLOWED_MIME_TYPES		Whitelist der zul√§ssigen MIME-Types mit den zugeh√∂rigen Dateiendungen
				*	@param	String	$imageUploadPath			=IMAGE_UPLOAD_PATH				Das Zielverzeichnis
				*
				*	@return	Array	{	'imagePath'	=>	String|NULL, 							Bei Erfolg der Speicherpfad zur Datei im Zielverzeichnis | bei Fehler NULL
				*						imageError'	=>	String|NULL}							Bei Erfolg NULL | Bei Fehler Fehlermeldung
				*
				*/
				function imageUpload(	$fileTemp,
										$imageMaxHeight 			= IMAGE_MAX_HEIGHT,
										$imageMaxWidth 				= IMAGE_MAX_WIDTH,
										$imageMinSize 				= IMAGE_MIN_SIZE,
										$imageMaxSize 				= IMAGE_MAX_SIZE,
										$imageAllowedMimeTypes 		= IMAGE_ALLOWED_MIME_TYPES,
										$imageUploadPath			= IMAGE_UPLOAD_PATH
									) 
				{
					#********** LOCAL SCOPE START **********#
if(DEBUG_F)		echo "<p class='debugImageUpload'>üåÄ <b>Line " . __LINE__ . "</b>: Aufruf " . __FUNCTION__ . "('$fileTemp') <i>(" . basename(__FILE__) . ")</i></p>\n";	
					
					
					#***********************************************************************#
					#********** GATHER INFORMATION FOR IMAGE FILE VIA FILE HEADER **********#
					#***********************************************************************#
					
					/*
						Die Funktion getimagesize() liest den Dateiheader einern Bilddatei aus und 
						liefert bei g√ºltigem MIME Type ('image/...') ein gemischtes Array zur√ºck:
						
						[0] 				Bildbreite in PX 
						[1] 				Bildh√∂he in PX 
						[3] 				Einen f√ºr das HTML <img>-Tag vorbereiteten String (width="480" height="532") 
						['bits']			Anzahl der Bits pro Kanal 
						['channels']	Anzahl der Farbkan√§le (somit auch das Farbmodell: RGB=3, CMYK=4) 
						['mime'] 		MIME Type
						
						Bei ung√ºltigem MIME Type (also nicht 'image/...') liefert getimagesize() false zur√ºck
					*/
					$imageDataArray = @getImageSize($fileTemp);
/*					
if(DEBUG_F)		echo "<pre class='debugImageUpload value'>Line <b>" . __LINE__ . "</b> <i>(" . basename(__FILE__) . ")</i>:<br>\n";					
if(DEBUG_F)		print_r($imageDataArray);					
if(DEBUG_F)		echo "</pre>";					
*/					
					
					#********** CHECK FOR VALID MIME TYPE **********#
					if( $imageDataArray === false ) {
						// Fehlerfall (MIME TYPE IS NO VALID IMAGE TYPE)						
						/*
							Bildwerte auf NULL setzen, damit die Variablen f√ºr die nachfolgenden
							Validierungen existieren und zu korrekten Fehlermeldungen f√ºhren
						*/
						$imageWidth = $imageHeight = $imageMimeType = $fileSize = NULL;
					
					
					#********** FETCH FILE INFOS **********#
					} elseif( is_array($imageDataArray) === true ) {
						// Erfolgsfall (MIME TYPE IS VALID IMAGE TYPE)
						
						$imageWidth 	= cleanString( $imageDataArray[0] );			// image WIDTH via FILE HEADER
						$imageHeight 	= cleanString( $imageDataArray[1] );			// image HEIGHT via FILE HEADER
						$imageMimeType 	= cleanString( $imageDataArray['mime'] );		// image MIME TYPE via FILE HEADER
						$fileSize 		= fileSize($fileTemp);								// file size in bytes vie filesize()						
					}
					
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$imageWidth: $imageWidth px<i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$imageHeight: $imageHeight px<i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$imageMimeType: $imageMimeType <i>(" . basename(__FILE__) . ")</i></p>\n";
if(DEBUG_F)		echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$fileSize: " . round($fileSize/1024,2) . "kB <i>(" . basename(__FILE__) . ")</i></p>\n";
					
					// GATHER INFORMATION FOR IMAGE FILE VIA FILE HEADER
					#*******************************************************************#
					
					
					#**************************************#
					#********** IMAGE VALIDATION **********#
					#**************************************#
					
					// Whitelist mit erlaubten MIME TYPES
					// $imageAllowedMimeTypes = array('image/jpeg'=>'.jpg', 'image/jpg'=>'.jpg', 'image/gif'=>'.gif', 'image/png'=>'.png');
					
					
					#********** CHECK IF FILE HEADER IS PLAUSIBLE **********#
					if( $fileSize < $imageMinSize OR $imageWidth === NULL OR $imageHeight === NULL OR $imageMimeType === NULL ) {
						// 1. Fehlerfall: Potentiell verd√§chtiger Datei Header
						$errorMessage = 'Potentiell verd√§chtiger Dateiupload!';
					
					
					#********** CHECK FOR ALLOWED MIME TYPES **********#	
					/*
						Die Funktion in_array() pr√ºft, ob eine √ºbergebene Needle einem Wert (value) innerhalb 
						eines zu √ºbergebenden Arrays entspricht.
						
						Die Funktion array_key_exists() pr√ºft, ob eine √ºbergebene Needle einem Index (key) innerhalb 
						eines zu √ºbergebenden Arrays entspricht.
					*/
					} elseif( array_key_exists($imageMimeType, $imageAllowedMimeTypes) === false ) {
						// 2. Fehlerfall: Unerlaubter Bildtyp
						$errorMessage = 'Dies ist kein erlaubter Bildtyp!';
						
					
					#********** VALIDATE IMAGE HEIGHT **********#
					} elseif( $imageHeight > $imageMaxHeight ) {
						// 3. Fehlerfall: Bildh√∂he zu gro√ü
						$errorMessage = "Die Bildh√∂he darf maximal $imageMaxHeight Pixel betragen!";
						
					
					#********** VALIDATE IMAGE WIDTH **********#
					} elseif( $imageWidth > $imageMaxWidth ) {
						// 4. Fehlerfall: Bildbreite zu gro√ü
						$errorMessage = "Die Bildbreite darf maximal $imageMaxWidth Pixel betragen!";
					
					
					#********** VALIDATE FILE SIZE **********#	
					} elseif( $fileSize > $imageMaxSize ) {
						// 4. Fehlerfall: Dateigr√∂√üe zu gro√ü
						$errorMessage = "Die Dateigr√∂√üe darf maximal $imageMaxSize kB betragen!";
						
					
					#********** ALL CHECKS ARE PASSED SUCCESSFULLY **********#
					} else {
						// Erfolgsfall
						$errorMessage = NULL;
						
						
					} // IMAGE VALIDATION END
					#*******************************************************************#
					
					
					#********** FINAL IMAGE VALIDATION **********#
					if( $errorMessage !== NULL ) {
						// Fehlerfall
if(DEBUG_F)			echo "<p class='debugImageUpload err'><b>Line " . __LINE__ . "</b>: Bildvalidierungsfehler: $errorMessage <i>(" . basename(__FILE__) . ")</i></p>\n";
						
						// Initialize $fileTarget
						$fileTarget = NULL;
						
					} else {
						// Erfolgsfall
if(DEBUG_F)			echo "<p class='debugImageUpload ok'><b>Line " . __LINE__ . "</b>: Die Bildvalidierung ergab keinen Fehler. <i>(" . basename(__FILE__) . ")</i></p>\n";				
						
						
						#**********************************************************#
						#********** PREPARE IMAGE FOR PERSISTANT STORAGE **********#
						#**********************************************************#						
						/*
							Da der Dateiname selbst Schadcode in Form von ung√ºltigen oder versteckten Zeichen,
							doppelte Dateiendungen (dateiname.exe.jpg) etc. beinhalten kann, dar√ºberhinaus ohnehin 
							s√§mtliche, nicht in einer URL erlaubten Sonderzeichen und Umlaute entfernt werden m√ºssten 
							sollte der Dateiname aus Sicherheitsgr√ºnden komplett neu generiert werden.
							
							Hierbei muss au√üerdem bedacht werden, dass die jeweils generierten Dateinamen unique
							sein m√ºssen, damit die Dateien sich bei gleichem Dateinamen nicht gegenseitig √ºberschreiben.
						*/
						#********** GENERATE UNIQUE FILE NAME **********#
						/*
							- 	mt_rand() stellt die verbesserte Version der Funktion rand() dar und generiert 
								Zufallszahlen mit einer gleichm√§√üigeren Verteilung √ºber das Wertesprektrum. Ohne zus√§tzliche
								Parameter werden Zahlenwerte zwischen 0 und dem h√∂chstm√∂glichem von mt_rand() verarbeitbaren 
								Zahlenwert erzeugt.
							- 	str_shuffle() mischt die Zeichen eines √ºbergebenen Strings zuf√§llig durcheinander.
							- 	microtime() liefert einen Timestamp mit Millionstel Sekunden zur√ºck (z.B. '0.57914300 163433596'),
								aus dem f√ºr eine URL-konforme Darstellung der Dezimaltrenner und das Leerzeichen entfernt werden.
						*/
						$fileName = mt_rand() . '_' . str_shuffle('abcdefghijklmnopqrstuvwxyz_-1234567890') . str_replace( array('.', ' '), '', microtime() );
						
						
						#********** GENERATE FILE EXTENSION **********#
						/*
							Aus Sicherheitsgr√ºnden wird nicht die urspr√ºngliche Dateinamenerweiterung aus dem
							Dateinamen verwendet, sondern eine vorgenerierte Dateiendung aus dem Array der 
							erlaubten MIME Types.
							Die Dateiendung wird anhand des ausgelesenen MIME Types [key] ausgew√§hlt.
						*/
						$fileExtension = $imageAllowedMimeTypes[$imageMimeType];
						
						
						#********** GENERATE FILE TARGET **********#
						/*
							Endg√ºltigen Speicherpfad auf dem Server generieren:
							destinationPath/fileName.fileExtension
						*/
						$fileTarget = $imageUploadPath . $fileName . $fileExtension;
						
if(DEBUG_F)			echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: \$fileTarget: $fileTarget <i>(" . basename(__FILE__) . ")</i></p>\n";
// if(DEBUG_F)			echo "<p class='debugImageUpload value'><b>Line " . __LINE__ . "</b>: Stringl√§nge: " . strlen($fileTarget) . " <i>(" . basename(__FILE__) . ")</i></p>\n";
						
						// PREPARE IMAGE FOR PERSISTANT STORAGE END
						#*******************************************************************#
						
						
						#*****************************************************#
						#********** MOVE IMAGE TO FINAL DESTINATION **********#
						#*****************************************************#						
						/*
							move_uploaded_file() verschiebt eine hochgeladene Datei an einen 
							neuen Speicherort und benennt die Datei um
						*/
						if( @move_uploaded_file($fileTemp, $fileTarget) === false ) {
							// 5. Fehlerfall: Bild konnte nicht verschoben/gespeichert werden
if(DEBUG_F)				echo "<p class='debugImageUpload err'><b>Line " . __LINE__ . "</b>: FEHLER beim Verschieben der Datei von '$fileTemp' nach '$fileTarget'! <i>(" . basename(__FILE__) . ")</i></p>\n";				
							
							// Fehlermeldung f√ºr den User
							$errorMessage = 'Beim Speichern des Bildes ist ein Fehler aufgetreten. Bitte versuchen Sie es sp√§ter noch einmal.';
							
							// Nicht existierenden Bildpfad l√∂schen
							$fileTarget = NULL;
							
						} else {
							// Erfolgsfall
if(DEBUG_F)				echo "<p class='debugImageUpload ok'><b>Line " . __LINE__ . "</b>: Datei erfolgreich von '$fileTemp' nach '$fileTarget' verschoben. <i>(" . basename(__FILE__) . ")</i></p>\n";				
							
						} // MOVE IMAGE TO FINAL DESTINATION END
						#*******************************************************************#
	
					} // FINAL IMAGE VALIDATION END
					

					#********** RETURN ARRAY CONTAINING EITHER IMAGE PATH OR ERROR MESSAGE **********#
					return array( 'imagePath'=>$fileTarget, 'imageError'=>$errorMessage );
					
					#********** LOCAL SCOPE END **********#
				}


#**********************************************************************************#
?>